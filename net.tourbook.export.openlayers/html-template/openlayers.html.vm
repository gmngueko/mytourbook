## Velocity Config:
#set( $google = true )
#set( $bing = false )
#set( $slider = true )
##
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta content="text/html; charset=UTF-8" http-equiv="content-type">
        <title>MyTourbook</title>
        <link rel="stylesheet" href="http://www.openlayers.org/dev/theme/default/style.css" type="text/css">
#if ( $google )
        <link rel="stylesheet" href="http://www.openlayers.org/dev/theme/default/google.css" type="text/css">
#end
        <style type="text/css">
            body {
                margin: 0;
            }
            #map {
                width: 100%;
                height: 100%;
            }
            
            /* avoid pink error tiles (see onImageLoadErrorColor) */ 
               .olImageLoadError { 
               background-color: transparent !important; 
            } 
        </style>
#if ( $google )
        <script src="http://maps.google.com/maps/api/js?v=3.2&amp;sensor=false"></script> 
#end
#if ( $bing )
        <script src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2&mkt=en-us"></script>
#end
        <script src="http://www.openlayers.org/dev/OpenLayers.js"></script>
        <script type="text/javascript">

            var dataExtent;
            var layersToLoad = 0;
            var zoomToExtent = function()
            {
               if(dataExtent) {
                  dataExtent.extend(this.getDataExtent());
               } else {
                  dataExtent = this.getDataExtent();
               }
               layersToLoad--;
               if (layersToLoad <= 0) {
                  map.zoomToExtent(dataExtent);
               }
            }; 

            function createGpxLayer(name, url, zoomLayers) {
               var layer = new OpenLayers.Layer.Vector(name, {
                  projection: new OpenLayers.Projection("EPSG:4326"),
                  protocol: new OpenLayers.Protocol.HTTP({
                     url: url,
                     format: new OpenLayers.Format.GPX()
                  }),
                  strategies: [new OpenLayers.Strategy.Fixed()],
                  style: {strokeColor: "red", strokeWidth: 5, strokeOpacity: 1, 
                          externalGraphic: "http://www.openlayers.org/dev/img/marker.png", graphicWidth:21, graphicHeight:25}
               });

               if (zoomLayers) {
                  layer.events.register("loadend", layer, zoomToExtent);
                  layersToLoad++;
               }

               return layer;
            }

            /** 
             * Add zoom level to MousePosition display
             * Parameters:
             * lonLat - OpenLayers.LonLat - Location to display
             * see OpenLayers.Control.MousePosition.formatOutput
             */
            function myMousePositionFormat(lonLat) {
               var digits = parseInt(this.numDigits);
               var newHtml =
                  this.prefix +
                  lonLat.lon.toFixed(digits) +
                  this.separator + 
                  lonLat.lat.toFixed(digits) +
                  this.separator +
                  this.map.getZoom() +
                  this.suffix;
               return newHtml;
            };

            /** 
             * "zoomend" event callback to update zoom level display. The context object this refers to 
             * OpenLayers.Control.MousePosition.
             * Parameters:
             * evt - OpenLayers.Event - event object
             */
            function myZoomend(evt) {
               if (this.lastXy != null) {
                  var lonLat = map.getLonLatFromPixel(this.lastXy);
                  if (this.displayProjection) {
                     lonLat.transform(this.map.getProjectionObject(), 
                                      this.displayProjection );
                  }
                  
                  var newHtml = this.formatOutput(lonLat);
                  if (newHtml != this.element.innerHTML) {
                     this.element.innerHTML = newHtml;
                  }
               }
            };

            // Zoom Level 18 and above slows down Internet Explorer when track is shown.
            var isIE = navigator.userAgent.toLowerCase().indexOf("msie") != -1;
            var maxZoomLevel;
            if (isIE && $tracks.size() > 0) {
               maxZoomLevel = 17;
            } else {
               maxZoomLevel = 18;
            }

            var map;

            // avoid pink error tiles (see CSS style olImageLoadError)
            // TODO do not show error tiles at all (see http://osm.cdauth.eu/map ?)
            OpenLayers.Util.onImageLoadErrorColor = "transparent"; 

            function init() {

               var options = {
                   controls: [],
                   projection: new OpenLayers.Projection("EPSG:900913"),
                   displayProjection: new OpenLayers.Projection("EPSG:4326"),
                   units: "m",
                   numZoomLevels: maxZoomLevel + 1,
                   maxResolution: 156543.0339,
                   maxExtent: new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508.34)
               };

               map = new OpenLayers.Map('map', options);

               map.addControl(new OpenLayers.Control.ArgParser());
               map.addControl(new OpenLayers.Control.Attribution());
               map.addControl(new OpenLayers.Control.LayerSwitcher());
               var mousePositionControl = new OpenLayers.Control.MousePosition({formatOutput: myMousePositionFormat});
               map.addControl(mousePositionControl);
               map.addControl(new OpenLayers.Control.Navigation());
               map.addControl(new OpenLayers.Control.PanZoomBar());

               map.events.register("zoomend", mousePositionControl, myZoomend);
               
#if ( $google )
               // Google
               var gsat = new OpenLayers.Layer.Google("Google Satellite", {type: google.maps.MapTypeId.SATELLITE});
               var ghyb = new OpenLayers.Layer.Google("Google Hybrid", {type: google.maps.MapTypeId.HYBRID});
               var gphy = new OpenLayers.Layer.Google("Google Terrain", {type: google.maps.MapTypeId.TERRAIN});
               var gmap = new OpenLayers.Layer.Google("Google Streets", { /* the default type*/ });
               map.addLayers([gsat, ghyb, gphy, gmap]);

#end
#if ( $bing )
               // Bing
               var baerial = new OpenLayers.Layer.VirtualEarth("Bing Satellite", {type: VEMapStyle.Aerial, 'sphericalMercator': true});
               var bhybrid = new OpenLayers.Layer.VirtualEarth("Bing Hybrid", {type: VEMapStyle.Hybrid, 'sphericalMercator': true});
               var bshaded = new OpenLayers.Layer.VirtualEarth("Bing Streets (+Terrain)", {type: VEMapStyle.Shaded, 'sphericalMercator': true});
               map.addLayers([baerial, bhybrid, bshaded]);

#end
               // OSM
               var osm = new OpenLayers.Layer.OSM("OpenStreetMap (Mapnik)", 
                  "http://tile.openstreetmap.org/${z}/${x}/${y}.png",
                  { numZoomLevels: maxZoomLevel + 1 }
               );
               map.addLayer(osm);

               var losmCycle = new OpenLayers.Layer.OSM("OSM Cycle Map",
                  "http://b.andy.sandbox.cloudmade.com/tiles/cycle/${z}/${x}/${y}.png",
                  { numZoomLevels: maxZoomLevel + 1 }
               );
               map.addLayer(losmCycle);

               //
               // Overlays
               //
               
               // OSM Hillshading (Hike & Bike Map, http://hikebikemap.de)
               var losmhill = new OpenLayers.Layer.OSM("Hillshading (NASA SRTM3 v2)", 
                  "http://toolserver.org/~cmarqu/hill/${z}/${x}/${y}.png",
                  {attribution: "Hillshading by <a href='http://hikebikemap.de/'>Hike & Bike Map</a>",
                  type: 'png', displayOutsideMaxExtent: true, 
                  isBaseLayer: false, visibility: false, numZoomLevels: 17, transparent: true, noOpaq: true }
               );
               map.addLayer(losmhill);
               // OSM Hillshading 2 - as second layer on top of first to double the effect
               var losmhill2 = new OpenLayers.Layer.OSM("Hillshading (exaggerate)", 
                  "http://toolserver.org/~cmarqu/hill/${z}/${x}/${y}.png",
                  { type: 'png', displayOutsideMaxExtent: true, 
                  isBaseLayer: false, visibility: false, numZoomLevels: 17, transparent: true, noOpaq: true }
               );
               map.addLayer(losmhill2);

               // OSM Lonvias Wanderwege Layer
               var lwander = new OpenLayers.Layer.OSM("Lonvia's Hiking Paths", 
                  "http://tile.lonvia.de/hiking/${z}/${x}/${y}.png",
                  { attribution: "Hiking Paths by <a href='http://hiking.lonvia.de'>Lonvia's Hiking Map</a>",
                  	type: 'png', displayOutsideMaxExtent: true, 
                    isBaseLayer: false, visibility: false, numZoomLevels: 17, transparent: true } 
               );
               map.addLayer(lwander);

## wenn called from map view use its lat/lon/zoom position 
#if ( $map )
               // Start position for the map
               var lat=$map.lat;
               var lon=$map.lon;
               // don't exceed max zoom level of current base layer 
               var zoom=Math.min($map.zoom, map.baseLayer.numZoomLevels - 1);

               map.setCenter(new OpenLayers.LonLat(lon, lat).transform(
                 new OpenLayers.Projection("EPSG:4326"),
                 map.getProjectionObject()
               ), zoom);
               var zoomLayers = false;
## when map position not applicable (export) zoom to extent of all tours
#else
               map.zoomToMaxExtent();
               var zoomLayers = true;
#end
               
               // GPX
#foreach( $track in $tracks )
               map.addLayer(createGpxLayer("$!track.trackName", "$!track.fileName", zoomLayers));
#end
            }
            
         </script>

#if ( $slider )
         <!-- Overlay Opacity Slider (source: http://sautter.com/map/) -->
         <script src="http://yui.yahooapis.com/combo?2.9.0/build/yahoo-dom-event/yahoo-dom-event.js&2.9.0/build/dragdrop/dragdrop-min.js&2.9.0/build/slider/slider-min.js"></script>
         <script type="text/javascript">
            function sliderInit() {
              var slider = YAHOO.widget.Slider.getHorizSlider("sliderbg", "sliderthumb", -16, 220+16-4-1);
              slider.getRealValue = function() {
                // NR: fixed missing offset (16) that caused opacity never to be 0
                //return Math.round(this.getValue()*100/220)/100;
                return Math.round((this.getValue()-16)*100/(220-4-1))/100;
              }
              slider.setValue(220*0.5+16-2);
              slider.subscribe("change", function(offsetFromStart) {
                for (var i = map.layers.length-1; i >= 0; i--) {
                  if (!map.layers[i].isBaseLayer && !map.layers[i].noOpaq) {
                    map.layers[i].setOpacity(slider.getRealValue());
                  }
                }
              });
            }
         </script>
         <style type="text/css">
            #slider { position:absolute; top:10px; left:50%; margin-left:-128px; z-index:9999; }
            #sliderbg { position:relative; height:18px; width:256px; background:url(http://sautter.com/map/slider/sliderbg.png) no-repeat; }
            #sliderthumb { position:absolute; top:-1px; }
         </style>
#end
    </head>
    <body onload="#if ( $slider )sliderInit(); #{end}init()">
#if ( $slider )
         <div id="slider">
            <div id="sliderbg">
              <div id="sliderthumb"><img src="http://sautter.com/map/slider/sliderknob.png"/></div>
            </div>
         </div>
#end
         <div id="map"></div>
    </body>
</html>
